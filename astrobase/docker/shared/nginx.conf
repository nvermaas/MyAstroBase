

upstream web8005 {
  server raspiastro:8005;
}

upstream web8008 {
  server raspiastro:8008;
}


upstream web8017 {
  server raspiastro:8017;
}


server {
  #root /usr/share/nginx/html;
  root /shared/public_html;

  server_name localhost;
  listen 80;


  # ===== hiking : Django backend in docker container on port 8005 =====

  location /hiking/ {
     proxy_pass http://web8005/hiking/;
  }

  # This reflect a change in the Django settings (docker_rpi.py) to serve multiple applications: STATIC_URL = '/static_astrobase/'
  location /static_hiking/ {
     proxy_pass http://web8005/static_hiking/;
  }

  # ===== astroview : ReactJS frontend =====


  location /astroview/ {
    proxy_pass http://web8017/;

	proxy_set_header Host $host;
	proxy_set_header X-Forwarded-For $remote_addr;
	proxy_intercept_errors on;
	recursive_error_pages on;
    error_page 404 = @fallback;
  }

  # Construction makes it possible to have a 'try_files' combined with a 'proxy_pass'
  # So when a request like "http://raspiastro/astroview/collections" fails, because 'collections' is not a backend location,
  # then the 'error_page' forwards it to a 'try_files', which forwards it to the astroview frontend. (where the 'collections' route is defined).

  location @fallback {
    try_files $uri $uri/ /astroview/index.html;
  }


  # ===== astrobase : Django backend in docker container on port 8008 =====

  location /my_astrobase/ {
     proxy_pass http://web8008/my_astrobase/;
  }

  # This reflect a change in the Django settings (docker.py) to serve multiple applications: STATIC_URL = '/static_astrobase/'
  location /static_astrobase/ {
     proxy_pass http://web8008/static_astrobase/;
  }


#  location /api-auth/ {
#     proxy_pass http://web8008/api-auth/;
#  }


  location /static/ {
     alias /static/;
  }


  # redirect server error pages to the static page /50x.html
  #
  error_page   500 502 503 504  /50x.html;
  location = /50x.html {
      root   /usr/share/nginx/html;
  }

}
